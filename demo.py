"""
Demo script - Egyszer≈± tesztel√©s a vil√°gz√°szl√≥ alkalmaz√°shoz
"""

import asyncio
from pathlib import Path


async def demo_download():
    """Demo: Z√°szl√≥k let√∂lt√©se"""
    print("üè≥Ô∏è Demo: Z√°szl√≥k let√∂lt√©se")
    print("=" * 30)
    
    from src.downloader import FlagDownloader
    
    downloader = FlagDownloader("data")
    
    # Orsz√°gk√≥dok lek√©r√©se
    print("üìã Orsz√°gk√≥dok lek√©r√©se...")
    countries = downloader.get_country_codes()
    print(f"‚úÖ {len(countries)} orsz√°g k√≥dja let√∂ltve")
    
    # Els≈ë 5 z√°szl√≥ let√∂lt√©se tesztk√©nt
    print("\nüì• Els≈ë 5 z√°szl√≥ let√∂lt√©se tesztk√©nt...")
    test_countries = list(countries.items())[:5]
    
    # Aszinkron session l√©trehoz√°sa a let√∂lt√©shez
    import aiohttp
    
    async with aiohttp.ClientSession() as session:
        for code, name in test_countries:
            print(f"  Let√∂lt√©s: {name} ({code})")
            try:
                result = await downloader.download_flag(session, code, name)
                if result[1]:
                    print(f"    ‚úÖ Sikeres")
                else:
                    print(f"    ‚ùå Sikertelen")
            except Exception as e:
                print(f"    ‚ùå Hiba: {e}")
    
    print(f"\nüìä Let√∂lt√∂tt z√°szl√≥k: {len(downloader.get_downloaded_flags())}")


def demo_search():
    """Demo: Keres√©si funkci√≥k"""
    print("\nüîç Demo: Keres√©si funkci√≥k")
    print("=" * 30)
    
    from src.search import FlagSearchEngine
    
    search_engine = FlagSearchEngine("data")
    
    # Teszt k√©r√©sek
    test_queries = [
        "piros z√°szl√≥k",
        "k√©k √©s feh√©r z√°szl√≥k", 
        "eur√≥pai z√°szl√≥k",
        "csillagos z√°szl√≥k"
    ]
    
    print("üß™ Teszt k√©r√©sek:")
    for query in test_queries:
        print(f"\n  K√©r√©s: '{query}'")
        
        # Sz√≠nek kinyer√©se
        colors = search_engine.extract_colors(query)
        if colors:
            print(f"    Sz√≠nek: {colors}")
        
        # Mint√°zatok kinyer√©se
        patterns = search_engine.extract_patterns(query)
        if patterns:
            print(f"    Mint√°zatok: {patterns}")
        
        # Kontinensek kinyer√©se
        continents = search_engine.extract_continents(query)
        if continents:
            print(f"    Kontinensek: {continents}")


def demo_analyzer():
    """Demo: Elemz√©si funkci√≥k"""
    print("\nüîç Demo: Elemz√©si funkci√≥k")
    print("=" * 30)
    
    from src.analyzer import FlagAnalyzer
    
    analyzer = FlagAnalyzer("data")
    
    # Let√∂lt√∂tt z√°szl√≥k ellen≈ërz√©se
    flags_dir = Path("data/flags")
    if not flags_dir.exists():
        print("‚ùå Nincsenek let√∂lt√∂tt z√°szl√≥k!")
        print("   El≈ësz√∂r futtasd: python demo.py download")
        return
    
    flag_files = list(flags_dir.glob("*.png"))
    print(f"üìÅ El√©rhet≈ë z√°szl√≥ f√°jlok: {len(flag_files)}")
    
    if flag_files:
        # Els≈ë z√°szl√≥ elemz√©se
        test_flag = flag_files[0]
        print(f"\nüß™ Teszt elemz√©s: {test_flag.name}")
        
        try:
            features = analyzer.analyze_flag(str(test_flag))
            if features:
                print("‚úÖ Elemz√©s sikeres!")
                print(f"  Sz√≠nek: {features.get('unique_colors', [])}")
                print(f"  Sz√≠nek sz√°ma: {features.get('color_count', 0)}")
                print(f"  Komplexit√°s: {features.get('complexity_score', 0)}")
                
                stripes = features.get('stripes', {})
                if stripes.get('has_horizontal_stripes'):
                    print("  V√≠zszintes cs√≠kok: ‚úÖ")
                if stripes.get('has_vertical_stripes'):
                    print("  F√ºgg≈ëleges cs√≠kok: ‚úÖ")
                
                shapes = features.get('shapes', {})
                if shapes.get('stars', 0) > 0:
                    print(f"  Csillagok: {shapes['stars']} db")
            else:
                print("‚ùå Elemz√©s sikertelen")
                
        except Exception as e:
            print(f"‚ùå Hiba az elemz√©s sor√°n: {e}")


def main():
    """F≈ëprogram"""
    import sys
    
    if len(sys.argv) < 2:
        print("üè≥Ô∏è Vil√°gz√°szl√≥ Alkalmaz√°s Demo")
        print("=" * 35)
        print("\nHaszn√°lat:")
        print("  python demo.py download   - Z√°szl√≥k let√∂lt√©se demo")
        print("  python demo.py search     - Keres√©si funkci√≥k demo")
        print("  python demo.py analyze    - Elemz√©si funkci√≥k demo")
        print("  python demo.py all        - Minden demo futtat√°sa")
        return
    
    command = sys.argv[1].lower()
    
    try:
        if command == "download":
            asyncio.run(demo_download())
        elif command == "search":
            demo_search()
        elif command == "analyze":
            demo_analyzer()
        elif command == "all":
            asyncio.run(demo_download())
            demo_search()
            demo_analyzer()
        else:
            print(f"‚ùå Ismeretlen parancs: {command}")
            
    except KeyboardInterrupt:
        print("\nüëã Demo le√°ll√≠tva")
    except Exception as e:
        print(f"‚ùå Hiba: {e}")


if __name__ == "__main__":
    main() 