"""
Vil√°gz√°szl√≥ Interakt√≠v Alkalmaz√°s - F≈ëprogram
"""

import asyncio
import sys
from pathlib import Path
import argparse

# Helyi modulok import√°l√°sa
from src.downloader import FlagDownloader
from src.analyzer import FlagAnalyzer
from src.search import FlagSearchEngine


class WorldFlagsApp:
    """F≈ëalkalmaz√°s oszt√°ly"""
    
    def __init__(self, data_dir: str = "data"):
        self.data_dir = Path(data_dir)
        self.downloader = FlagDownloader(data_dir)
        self.analyzer = FlagAnalyzer(data_dir)
        self.search_engine = FlagSearchEngine(data_dir)
    
    async def setup_data(self):
        """Adatok let√∂lt√©se √©s elemz√©se"""
        print("üè≥Ô∏è Vil√°gz√°szl√≥ Alkalmaz√°s Inicializ√°l√°sa")
        print("=" * 50)
        
        # 1. Z√°szl√≥k let√∂lt√©se
        print("\nüì• 1. Z√°szl√≥k let√∂lt√©se...")
        try:
            results = await self.downloader.download_all_flags(size="w320", max_concurrent=5)
            successful = sum(1 for success in results.values() if success)
            print(f"‚úÖ {successful} z√°szl√≥ sikeresen let√∂ltve!")
        except Exception as e:
            print(f"‚ùå Hiba a let√∂lt√©s sor√°n: {e}")
            return False
        
        # 2. Z√°szl√≥k elemz√©se
        print("\nüîç 2. Z√°szl√≥k elemz√©se...")
        try:
            features = self.analyzer.analyze_all_flags()
            print(f"‚úÖ {len(features)} z√°szl√≥ sikeresen elemezve!")
        except Exception as e:
            print(f"‚ùå Hiba az elemz√©s sor√°n: {e}")
            return False
        
        print("\nüéâ Inicializ√°l√°s befejezve! Az alkalmaz√°s haszn√°latra k√©sz.")
        return True
    
    def interactive_search(self):
        """Interakt√≠v keres√©si m√≥d"""
        print("\nüîç Interakt√≠v Z√°szl√≥keres≈ë")
        print("=" * 30)
        print("√çrj be keres√©si kifejez√©seket, vagy 'quit' a kil√©p√©shez.")
        print("P√©ld√°k:")
        print("- 'piros √©s k√©k z√°szl√≥k'")
        print("- 'csillagos z√°szl√≥k'")
        print("- 'eur√≥pai z√°szl√≥k'")
        print("- 'help' - s√∫g√≥ megjelen√≠t√©se")
        print()
        
        while True:
            try:
                query = input("üîç Keres√©s: ").strip()
                
                if query.lower() in ['quit', 'exit', 'kil√©p']:
                    print("üëã Viszl√°t!")
                    break
                
                if query.lower() == 'help':
                    self.show_help()
                    continue
                
                if not query:
                    continue
                
                # Keres√©s v√©grehajt√°sa
                results = self.search_engine.search_flags(query)
                self.display_results(results, query)
                
            except KeyboardInterrupt:
                print("\nüëã Viszl√°t!")
                break
            except Exception as e:
                print(f"‚ùå Hiba: {e}")
    
    def display_results(self, results: dict, query: str):
        """Keres√©si eredm√©nyek megjelen√≠t√©se"""
        total_count = results.get('total_count', 0)
        search_info = results.get('search_info', {})
        flag_details = results.get('flag_details', [])
        
        print(f"\nüìä Keres√©si eredm√©nyek: '{query}'")
        print("-" * 40)
        
        # Keres√©si inform√°ci√≥k
        info_parts = []
        if search_info.get('colors'):
            info_parts.append(f"Sz√≠nek: {', '.join(search_info['colors'])}")
        if search_info.get('patterns'):
            info_parts.append(f"Mint√°zatok: {', '.join(search_info['patterns'])}")
        if search_info.get('continents'):
            info_parts.append(f"Kontinensek: {', '.join(search_info['continents'])}")
        
        if info_parts:
            print(f"üéØ Sz≈±r≈ëk: {' | '.join(info_parts)}")
        
        print(f"üìà Tal√°latok: {total_count} z√°szl√≥")
        
        if total_count == 0:
            print("‚ùå Nincs tal√°lat a keres√©si krit√©riumoknak megfelel≈ëen.")
            print("üí° Javaslatok:")
            print("   - Pr√≥b√°lj m√°s sz√≠neket vagy mint√°zatokat")
            print("   - Haszn√°lj egyszer≈±bb kifejez√©seket")
            return
        
        # Els≈ë 10 eredm√©ny megjelen√≠t√©se
        print(f"\nüè≥Ô∏è Els≈ë {min(10, len(flag_details))} eredm√©ny:")
        for i, detail in enumerate(flag_details[:10], 1):
            colors_str = ", ".join(detail.get('colors', []))
            patterns = []
            if detail.get('has_stripes'):
                patterns.append("cs√≠kos")
            if detail.get('has_bands'):
                patterns.append("s√°vos")
            if detail.get('has_stars'):
                patterns.append("csillagos")
            
            pattern_str = f" ({', '.join(patterns)})" if patterns else ""
            complexity = detail.get('complexity_score', 0)
            
            print(f"  {i:2d}. {detail['country_name']} ({detail['country_code'].upper()})")
            print(f"      Sz√≠nek: {colors_str}{pattern_str}")
            if complexity > 0:
                print(f"      Komplexit√°s: {complexity}")
        
        if total_count > 10:
            print(f"\n... √©s m√©g {total_count - 10} tal√°lat.")
    
    def show_help(self):
        """S√∫g√≥ megjelen√≠t√©se"""
        print("\nü§ñ Z√°szl√≥keres≈ë S√∫g√≥")
        print("=" * 25)
        
        print("\nüé® Keres√©si p√©ld√°k:")
        examples = [
            "Sz√≠nek alapj√°n: 'piros √©s k√©k z√°szl√≥k', 'z√∂ld z√°szl√≥k'",
            "Mint√°zatok alapj√°n: 'csillagos z√°szl√≥k', 'cs√≠kos z√°szl√≥k'",
            "Kontinensek alapj√°n: 'eur√≥pai z√°szl√≥k', '√°zsiai z√°szl√≥k'",
            "Kombin√°lt: 'piros csillagos z√°szl√≥k', 'k√©k cs√≠kos eur√≥pai z√°szl√≥k'"
        ]
        
        for example in examples:
            print(f"  ‚Ä¢ {example}")
        
        print("\nüåà T√°mogatott sz√≠nek:")
        colors = ["piros/v√∂r√∂s", "k√©k", "z√∂ld", "s√°rga", "feh√©r", "fekete", "narancs", "lila", "r√≥zsasz√≠n", "barna"]
        print(f"  {', '.join(colors)}")
        
        print("\nüî∑ T√°mogatott mint√°zatok:")
        patterns = ["csillag/csillagos", "cs√≠k/cs√≠kos", "s√°v/s√°vos", "kereszt", "k√∂r"]
        print(f"  {', '.join(patterns)}")
        
        print("\nüåç T√°mogatott kontinensek:")
        continents = ["Eur√≥pa", "√Åzsia", "Afrika", "Amerika", "√âszak-Amerika", "K√∂z√©p-Amerika", "D√©l-Amerika", "√ìce√°nia"]
        print(f"  {', '.join(continents)}")
    
    def show_stats(self):
        """Statisztik√°k megjelen√≠t√©se"""
        features = self.analyzer.load_features()
        
        if not features:
            print("‚ùå Nincs elemzett adat!")
            return
        
        print("\nüìä Z√°szl√≥ Statisztik√°k")
        print("=" * 20)
        
        # Alapstatisztik√°k
        total_flags = len(features)
        print(f"üìà √ñsszesen elemzett z√°szl√≥: {total_flags}")
        
        # Sz√≠nstatisztik√°k
        all_colors = []
        for flag_data in features.values():
            all_colors.extend(flag_data.get('unique_colors', []))
        
        from collections import Counter
        color_counts = Counter(all_colors)
        
        print("\nüåà Leggyakoribb sz√≠nek:")
        for color, count in color_counts.most_common(10):
            percentage = (count / total_flags) * 100
            print(f"  ‚Ä¢ {color}: {count} z√°szl√≥ ({percentage:.1f}%)")
        
        # Mint√°zat statisztik√°k
        stripe_count = sum(1 for f in features.values() 
                          if f.get('stripes', {}).get('has_horizontal_stripes') or
                             f.get('stripes', {}).get('has_vertical_stripes'))
        band_count = sum(1 for f in features.values() 
                         if f.get('stripes', {}).get('has_horizontal_bands') or
                            f.get('stripes', {}).get('has_vertical_bands'))
        star_count = sum(1 for f in features.values() 
                        if f.get('shapes', {}).get('stars', 0) > 0)
        
        print("\nüî∑ Mint√°zatok:")
        print(f"  ‚Ä¢ Cs√≠kos z√°szl√≥k: {stripe_count} ({stripe_count/total_flags*100:.1f}%)")
        print(f"  ‚Ä¢ S√°vos z√°szl√≥k: {band_count} ({band_count/total_flags*100:.1f}%)")
        print(f"  ‚Ä¢ Csillagos z√°szl√≥k: {star_count} ({star_count/total_flags*100:.1f}%)")


def main():
    """F≈ëprogram"""
    parser = argparse.ArgumentParser(description='Vil√°gz√°szl√≥ Interakt√≠v Alkalmaz√°s')
    parser.add_argument('--setup', action='store_true', help='Adatok let√∂lt√©se √©s elemz√©se')
    parser.add_argument('--search', type=str, help='Egyetlen keres√©s v√©grehajt√°sa')
    parser.add_argument('--interactive', action='store_true', help='Interakt√≠v keres√©si m√≥d')
    parser.add_argument('--stats', action='store_true', help='Statisztik√°k megjelen√≠t√©se')
    parser.add_argument('--streamlit', action='store_true', help='Streamlit webes fel√ºlet ind√≠t√°sa')
    parser.add_argument('--data-dir', type=str, default='data', help='Adatok k√∂nyvt√°ra')
    
    args = parser.parse_args()
    
    app = WorldFlagsApp(args.data_dir)
    
    # Ha nincs argumentum, alap√©rtelmezett m≈±velet
    if not any([args.setup, args.search, args.interactive, args.stats, args.streamlit]):
        print("üè≥Ô∏è Vil√°gz√°szl√≥ Interakt√≠v Alkalmaz√°s")
        print("Haszn√°lat: python main.py [opci√≥k]")
        print("\nOpci√≥k:")
        print("  --setup          Adatok let√∂lt√©se √©s elemz√©se")
        print("  --interactive    Interakt√≠v keres√©si m√≥d")
        print("  --search 'query' Egyetlen keres√©s")
        print("  --stats          Statisztik√°k")
        print("  --streamlit      Webes fel√ºlet")
        print("  --help           Ez a s√∫g√≥")
        print("\nP√©lda:")
        print("  python main.py --setup")
        print("  python main.py --interactive")
        print("  python main.py --search 'piros z√°szl√≥k'")
        return
    
    try:
        # Adatok inicializ√°l√°sa
        if args.setup:
            asyncio.run(app.setup_data())
            return
        
        # Streamlit fel√ºlet
        if args.streamlit:
            print("üåê Streamlit webes fel√ºlet ind√≠t√°sa...")
            print("Nyisd meg a b√∂ng√©sz≈ëben: http://localhost:8501")
            
            try:
                # Egyszer≈± k√∂zvetlen futtat√°s
                from src.chat import FlagChatInterface
                
                # Streamlit alkalmaz√°s k√∂zvetlen√ºl
                chat_interface = FlagChatInterface()
                chat_interface.run_streamlit_app()
                
            except Exception as e:
                print(f"‚ùå Streamlit hiba: {e}")
                import traceback
                print(f"R√©szletek: {traceback.format_exc()}")
            
            return
        
        # Statisztik√°k
        if args.stats:
            app.show_stats()
            return
        
        # Egyetlen keres√©s
        if args.search:
            results = app.search_engine.search_flags(args.search)
            app.display_results(results, args.search)
            return
        
        # Interakt√≠v m√≥d
        if args.interactive:
            app.interactive_search()
            return
            
    except KeyboardInterrupt:
        print("\nüëã Alkalmaz√°s le√°ll√≠tva.")
    except Exception as e:
        print(f"‚ùå Hiba: {e}")
        return 1
    
    return 0


if __name__ == "__main__":
    sys.exit(main()) 